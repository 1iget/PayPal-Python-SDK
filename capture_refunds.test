  '''
  @patch('test_helper.paypal.Api.post', autospec=True) 
  @patch('test_helper.paypal.Api.get', autospec=True) 
  def test_reauthorize(self, mock_get, mock_post):
    mock_get.return_value = {'id': 'PAY-888868365Y436124EKLKW6JA', 'update_time': '2014-01-14T17:09:00Z', 'links': [], 'payer' : {},
  	 'transactions': [{'related_resources': [{'authorization': self.authorization_attributes}],
	    					  	}]}
    response = self.payment.create()
    authorization = self.payment.transactions[0].related_resources[0].authorization

    authorization.amount = {
      "currency": "USD",
      "total": "7.00" }  
    
    mock_post.return_value = { "id": "8AA831015G517922L", "create_time": "2013-06-25T21:39:15Z",
  								"update_time": "2013-06-25T21:39:17Z",
  								"state": "authorized",
								  "amount": {
								    "total": "7.00",
								    "currency": "USD"
								  },
								  "parent_payment": "PAY-7LD317540C810384EKHFAGYA",
								  "valid_until": "2013-07-24T21:39:15Z",
								  "links": [
								    {
								      "href": "https://api.sandbox.paypal.com/v1/payments/authorization/8AA831015G517922L",
								      "rel": "self",
								      "method": "GET"
								    },
								    {
								      "href": "https://api.sandbox.paypal.com/v1/payments/payment/PAY-7LD317540C810384EKHFAGYA",
								      "rel": "parent_payment",
								      "method": "GET"
								    },
								    {
								      "href": "https://api.sandbox.paypal.com/v1/payments/authorization/8AA831015G517922L/capture",
								      "rel": "capture",
								      "method": "POST"
								    }
								  ]
								}
    response = authorization.reauthorize()
    self.assertEqual(response, True)
    mock_post.assert_called_once_with(authorization.api)
  
  
  @patch('test_helper.paypal.Api.get', autospec=True) 
  def test_capture_find(self, mock):
    capture_id = '7S373777UY2709045'
    capture = paypal.Capture.find(capture_id)
    self.assertEqual(capture.__class__, paypal.Capture)
    mock.assert_called_once_with(capture.api, 'v1/payments/capture/' + capture_id)

    with patch.object(paypal.Api, 'post', return_value=None) as mock_post:
    	mock_post.return_value = { "id": "8AA831015G517922L"}
    	refund = capture.refund({ "amount": { "currency": "USD", "total": "1.00" } })
  '''

  '''
  @patch('test_helper.paypal.Api.get', autospec=True) 
  def test_refund(self, mock_get):
      sale   = paypal.Sale.find(self.create_sale().id)
      mock_get.assert_called_once_with(sale.api,'v1/payments/sale/5VX40080GX603650')
      refund = sale.refund({ "amount": { "total": "0.01", "currency": "USD" } })
      self.assertEqual(refund.success(), True)
  '''